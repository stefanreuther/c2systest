#!/usr/bin/perl
#
#  Common functions for c2check tests
#


##
##  Utilities
##

sub ct_prepare_game {
    my $setup = shift;
    my $dir = setup_get_tmpfile_name($setup, 'gd'.setup_count($setup));
    mkdir $dir, 0777 or die "$dir: $!";
    foreach (qw(beamspec.dat engspec.dat hullspec.dat pconfig.src planet.nm player7.rst torpspec.dat truehull.dat xyplan.dat)) {
        file_put("$dir/$_", file_content("data/game2/$_"));
    }
    $dir;
}

sub ct_prepare_game_rst {
    my $setup = shift;
    my $dir = ct_prepare_game($setup);
    file_put("$dir/player7.trn", c2service::vp_make_turn(7, "07-09-201712:00:03"));
    $dir;
}

sub ct_prepare_game_unpack {
    my $setup = shift;
    my $dir = ct_prepare_game($setup);
    my $unp = shell_new($setup, 'unpack');
    shell_add_args($unp, $dir);
    shell_call($unp);
    $dir;
}

# Parse a file.
#   $content = binary file content
#   $desc = description
#      mode => 'auto'        (default, get as many as fit)
#              'fixed'       (get exactly /count/ elements)
#              'prefix'      (get count, then that number of elements)
#      count => count        (for 'fixed')
#      pattern => pack/unpack pattern
#      fields => [list of fields]
# Returns hash:
#   <n> => n'th record, starting at 1
#   rest => unparsed suffix
#   count => count (for 'prefix')
sub ct_parse {
    my ($content, $desc) = @_;
    my $result = {};
    my $record_length = length(pack($desc->{pattern}));
    assert_differs $record_length, 0;

    # determine count and starting position
    my $count;
    my $pos = 0;
    if ($desc->{mode} eq 'auto') {
        $count = int(length($content) / $record_length);
    } elsif ($desc->{mode} eq 'fixed') {
        $count = $desc->{count};
    } elsif ($desc->{mode} eq 'prefix') {
        $count = unpack('v', substr($content, 0, 2));
        $result->{count} = $count;
        $pos = 2;
    } else {
        test_failure "Invalid '\$desc->{mode}'";
    }

    # parse
    foreach my $id (1 .. $count) {
        my @record = unpack($desc->{pattern}, substr($content, $pos, $record_length));
        my $record = {};
        foreach (@{$desc->{fields}}) {
            $record->{$_} = shift(@record);
        }
        $result->{$id} = $record;
        $pos += $record_length;
    }
    $result->{rest} = substr($content, $pos);
    $result;
}

# Pack a file. This is the inverse of ct_parse.
# Note that for 'prefix' mode, the count being written is taken from $content->{count},
# but the number of records written is detemined from the numeric elements.
# This allows producing out-of-spec files.
sub ct_pack {
    my ($content, $desc) = @_;
    my $result = '';
    my $record_length = length(pack($desc->{pattern}));
    if ($desc->{mode} eq 'auto' || $desc->{mode} eq 'fixed') {
        # nothing to do
    } elsif ($desc->{mode} eq 'prefix') {
        $result .= pack("v", $content->{count});
    } else {
        test_failure "Invalid '\$desc->{mode}'";
    }
    
    my $id = 1;
    while ($content->{$id}) {
        $result .= pack($desc->{pattern}, map {$content->{$id}{$_}} @{$desc->{fields}});
        ++$id;
    }
    $result .= $content->{rest};
    $result;
}

# Edit a file
#   $file_name = full file name
#   $desc      = file format spec
#   $edit      = editor function. Called with parsed data as parameter and can modify it.
sub ct_edit_file {
    my ($file_name, $desc, $edit) = @_;
    my $data = ct_parse(file_content("$file_name"), $desc);
    $edit->($data);
    file_put("$file_name", ct_pack($data, $desc));
}


sub ct_run_must_fail {
    my ($setup, $dir, $text, @args) = @_;
    my $shell = shell_new($setup, 'check');
    shell_add_args($shell, $dir, 7, @args);
    assert_contains shell_call($shell, '', expect_exit=>512, want_error=>1), $text;
    assert_contains file_content("$dir/check.log"), $text;
}

sub ct_run_must_succeed {
    my ($setup, $dir, @args) = @_;
    my $shell = shell_new($setup, 'check');
    shell_add_args($shell, $dir, 7, @args);
    shell_call($shell, '');
}

sub ct_run_must_succeed_with_message {
    my ($setup, $dir, $text, @args) = @_;
    my $shell = shell_new($setup, 'check');
    shell_add_args($shell, $dir, 7, @args);
    assert_contains shell_call($shell, ''), $text;
    assert_contains file_content("$dir/check.log"), $text;
}

##
##  Canned tests
##

# Test missing files.
# A: Prepare a directory, remove a file. This tests both the RST+TRN and the Unpacked case.
# E: c2check exits with error result. Error message must reference missing file.
sub ct_test_missing_file {
    my $setup = shift;
    my $file = shift;

    # Case 1: RST+TRN
    my $dir = ct_prepare_game_rst($setup);
    unlink "$dir/$file";
    ct_run_must_fail($setup, $dir, $file, '-r', $dir);  # note 2nd 'dir' given as "root" parameter to avoid invoking defaults

    # Case 2: Unpacked
    $dir = ct_prepare_game_unpack($setup);
    unlink "$dir/$file";
    ct_run_must_fail($setup, $dir, $file, $dir);  # note 2nd 'dir' given as "root" parameter to avoid invoking defaults
}

# Test truncated files.
# A: Create a directory, truncate a file. This tests both the RST+TRN and the Unpacked case.
# E: c2check exits with error result. Error message must reference truncated file.
sub ct_test_truncated_file {
    my $setup = shift;
    my $file = shift;
    my $size = shift;

    # Case 1: RST+TRN
    my $dir = ct_prepare_game_rst($setup);
    file_put("$dir/$file", substr(file_content("$dir/$file"), 0, $size));
    ct_run_must_fail($setup, $dir, $file, '-r', $dir);  # note 2nd 'dir' given as "root" parameter to avoid invoking defaults

    # Case 2: Unpacked
    $dir = ct_prepare_game_unpack($setup);
    file_put("$dir/$file", substr(file_content("$dir/$file"), 0, $size));
    ct_run_must_fail($setup, $dir, $file, $dir);  # note 2nd 'dir' given as "root" parameter to avoid invoking defaults
}

# Test edited specification file.
#   $setup     = test setup
#   $file_name = name of file to edit
#   $desc      = file format spec
#   $message   = expected error message
#   $edit      = editor function
# A: Create a directory, modify a specification file.
# E: c2check exits with error result. Result must include the specified error message.
sub ct_test_edited_spec_file {
    my ($setup, $file_name, $desc, $message, $edit) = @_;
    my $dir = ct_prepare_game_rst($setup);
    ct_edit_file("$dir/$file_name", $desc, $edit);
    ct_run_must_fail($setup, $dir, $message, '-r');
}

# Test edited specification file, "-1" case.
#   $setup     = test setup
#   $file_name = name of file to edit
#   $desc      = file format spec
#   $edit      = editor function
# A: Create a directory, modify a specification file, invoke c2check -z.
# E: Execution must succeed, -z will ignore -1 values.
# FIXME: This special handling is implemented for most values, including specs,
# although it is practically relevant only for regular editable fields (namely, warp factor).
sub ct_test_edited_spec_file_m1 {
    my ($setup, $file_name, $desc, $edit) = @_;
    my $dir = ct_prepare_game_rst($setup);
    ct_edit_file("$dir/$file_name", $desc, $edit);
    ct_run_must_succeed($setup, $dir, '-z', '-r');
}


##
##  Specification definitions
##

sub ct_ship_spec {
    return {
        mode => 'prefix',
        fields => [qw'id owner fc warp dx dy x y engine hull beam nbeams nbays torp ammo ntubes mission enemy towarg damage crew clans name n t d m sup
                      unloadn unloadt unloadd unloadm unloadclans unloadsup unloadid
                      transfern transfert transferd transferm transferclans transfersup transferid
                      intarg money'],
        pattern => 'v2A3v19A20v5'.'v7'.'v7'.'v2'
    };
}

sub ct_planet_spec {
    return {
        mode => 'prefix',
        fields => [qw'owner id fc mines factories defense n t d m clans sup money gn gt gd gm dn dt dd dm
                      ctax ntax chappy nhappy ngov nclans nrace temp buildbase'],
        pattern => 'v2A3v3V11v4'.'v5V1v3'
    };
}

sub ct_base_spec {
    return {
        mode => 'prefix',
        fields => [qw'id baseowner basedefense damage enginetech hulltech beamtech torptech
                      e1 e2 e3 e4 e5 e6 e7 e8 e9
                      h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h15 h16 h17 h18 h19 h20
                      b1 b2 b3 b4 b5 b6 b7 b8 b9 b10
                      l1 l2 l3 l4 l5 l6 l7 l8 l9 l10
                      t1 t2 t3 t4 t5 t6 t7 t8 t9 t10
                      fighters shipid shipaction mission
                      buildslot buildengine buildbeam buildnbeam buildtorp buildntube buildzero'],
        pattern => 'v8v9v20v10v10v10v4v7'
    };
}
